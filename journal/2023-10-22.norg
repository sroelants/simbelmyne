* Legal moves

  So, for now, I guess I can have `Piece` implement a `piece.legal_moves` 
  method that takes a `board` and computes all the legal moves?

  This is going to take /a bunch/ of logic, so might need to come up with a sane
  way to structure this function
** Checks
   Are we in check? Can only make moves that would take us /out/ of check (how
   do we test that? simply check after every move? Actually, we need to do a
   "not in check" test after every move /anyway/. This doesn't have to be
   sophysticated for now, can just play out /every/ legal move afterwards and
   check for captures. Actually, this is probably the place where I can keep
   track of all attacked squares, and simply see if the kind moved to a square
   that /isn't/ under attack. With the added caveat of the sliding pieces
   pointed out {https://peterellisjones.com/posts/generating-legal-chess-moves-efficiently/}[here]

    Is there really any value in separating out the "pushes" and "attacks" for most
    of these pieces? Or should I just have all of them (except pawns?) just do the
    whole "take until I see a piece" think, and include it if it's an opposing
    piece. Peter Ellis Jones seems to think so. Might just keep it like that for
    now, then.

** Pins
   This is the other really tricky one, I suppose...

   We're looking to find the "pin rays" between the king and any sliders around,
   and mask for any pieces that are on those pin rays. The pinned pieces, then
   are only allowed to move along those pin rays

   How do we get the pin rays?


